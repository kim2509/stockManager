<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="getStockCode" xml:space="preserve">
    <value>select * 
from tbl_stock_code 
where stockCode = '{0}' and stockName = '{1}'</value>
  </data>
  <data name="getStockDailyInfo" xml:space="preserve">
    <value>select *
from tbl_stock_daily
where inqDate = '{0}' and stockCode = '{1}'
limit 0, 1</value>
  </data>
  <data name="insertStockCode" xml:space="preserve">
    <value>insert into tbl_stock_code(stockCode, stockName, createdDate) values('{0}','{1}',NOW());</value>
  </data>
  <data name="insertStockDaily" xml:space="preserve">
    <value>insert into tbl_stock_daily(
inqDate
, stockCode
, stockName
, currentPrice
, traffic
, diffBefore
, upDownRate
, createdDate
)
values
( 
'{0}'
,'{1}'
,'{2}'
,'{3}'
,'{4}'
,'{5}'
,'{6}'
, NOW()
)</value>
  </data>
  <data name="setStockTarget" xml:space="preserve">
    <value>INSERT into tbl_stock_target(inqDate, stockCode, stockName, startPrice, currentPrice
, STATUS, minsElapsed, createdDate)
SELECT a.inqDate, a.stockCode, a.stockName, a.currentPrice, a.currentPrice, '대기', 0, NOW()
FROM tbl_stock_daily a
	LEFT OUTER JOIN tbl_stock_target b ON a.inqDate = b.inqDate AND a.stockCode = b.stockCode
WHERE a.inqDate = '{0}' AND b.inqDate IS null;</value>
  </data>
  <data name="거래량정보에서현재가갱신" xml:space="preserve">
    <value>UPDATE tbl_stock_target a
	INNER JOIN tbl_stock_daily b ON a.inqDate = b.inqDate
		AND a.stockCode = b.stockCode and a.currentPrice &lt;&gt; b.currentPrice
SET a.currentPrice = b.currentPrice
, a.updatedDate = NOW()
WHERE b.inqDate = '{0}'</value>
  </data>
  <data name="금일매수대상종목조회" xml:space="preserve">
    <value>SELECT a.*
FROM tbl_stock_target a
	LEFT OUTER JOIN tbl_stock_order b ON a.inqDate = b.inqDate AND a.stockCode = b.stockCode AND b.Status = '요청중'
WHERE a.inqDate = '{0}'
and a.STATUS = '대기'
AND b.stockCode IS NULL
ORDER BY ABS(startPrice - currentPrice)</value>
  </data>
  <data name="매도완료업데이트대상조회" xml:space="preserve">
    <value>SELECT 
a.orderNo
, b.inqDate
, b.stockCode
, b.stockName
, b.Qty
, a.confirmPrice as Price
, b.OrderType
, b.`Status`
, b.APIResult
, b.createdDate
, b.updateDate
FROM tbl_stock_myorderlist a
	INNER JOIN tbl_stock_order b ON a.orderDate = b.inqDate AND a.stockCode = b.stockCode 
		AND a.Qty = b.Qty AND a.Price = b.Price
		AND b.OrderType = '매도' AND b.`Status` = '요청중'
              LEFT OUTER JOIN tbl_stock_order c on a.orderNo = c.orderNo
WHERE a.orderType like '현금매도%' AND a.acceptType = '주문완료'
AND a.confirmNo &lt;&gt; ''
AND a.confirmQty &gt; 0 AND a.confirmPrice &gt; 0
AND a.OrderDate = '{0}'
AND c.orderNo IS NULL</value>
  </data>
  <data name="매수완료업데이트대상및매도대상조회" xml:space="preserve">
    <value>SELECT 
a.orderNo
, b.inqDate
, b.stockCode
, b.stockName
, b.Qty
, a.confirmPrice as Price
, b.OrderType
, b.`Status`
, b.APIResult
, b.createdDate
, b.updateDate
FROM tbl_stock_myorderlist a
	INNER JOIN tbl_stock_order b ON a.orderDate = b.inqDate AND a.stockCode = b.stockCode 
		AND a.confirmQty = b.Qty AND a.Price = b.Price
		AND b.OrderType = '매수' AND b.`Status` = '요청중'
              LEFT OUTER JOIN tbl_stock_order c on a.orderNo = c.orderNo
WHERE a.orderType like '현금매수%' AND a.acceptType = '주문완료'
AND a.confirmNo &lt;&gt; ''
AND a.confirmQty &gt; 0 AND a.confirmPrice &gt; 0
AND a.OrderDate = '{0}'
and c.orderNo IS NULL</value>
  </data>
  <data name="종목현재가갱신" xml:space="preserve">
    <value>UPDATE tbl_stock_daily
SET currentPrice = {2}
WHERE inqDate = '{0}' and stockCode = '{1}'</value>
  </data>
  <data name="주식상태대기로변경" xml:space="preserve">
    <value>update tbl_stock_target
set status = '대기'
where inqDate = '{0}' and stockCode = '{1}' and status = '매도요청중'</value>
  </data>
  <data name="주식상태매도요청중으로변경" xml:space="preserve">
    <value>update tbl_stock_target
set status = '매도요청중'
where inqDate = '{0}' and stockCode = '{1}' and status = '매수요청중'</value>
  </data>
  <data name="주식상태매수요청중으로변경" xml:space="preserve">
    <value>update tbl_stock_target
set status = '매수요청중'
where inqDate = '{0}' and stockCode = '{1}' and status = '대기'</value>
  </data>
  <data name="주식주문이력추가" xml:space="preserve">
    <value>insert into tbl_stock_order( inqDate, stockCode, stockName, Qty, Price
, OrderType, Status, APIResult, createdDate)
values( '{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}',NOW())</value>
  </data>
  <data name="체결내역업데이트" xml:space="preserve">
    <value>update tbl_stock_myorderlist
set stockBondGubun = '{3}' , sellFlag = '{4}' , orderType = '{5}' , Qty = '{6}' , Price = '{7}'
, ReserveDeny = '{8}' , confirmNo = '{9}' , acceptType = '{10}' , orgOrderNo = '{11}' , stockName = '{12}'
, payType = '{13}' , creditTransType = '{14}', confirmQty = '{15}', confirmPrice = '{16}', commType = '{17}'
, modifyFlag = '{18}', confirmedTime = '{19}'
where orderDate = '{0}'
and orderNo = '{1}'
and stockCode = '{2}'</value>
  </data>
  <data name="체결내역있는지검사" xml:space="preserve">
    <value>select *
from tbl_stock_myorderlist
where orderDate = '{0}'
and orderNo = '{1}'
and stockCode = '{2}'</value>
  </data>
  <data name="체결내역한건등록" xml:space="preserve">
    <value>INSERT INTO tbl_stock_myorderlist(
stockBondGubun
, orderNo
, stockCode
, sellFlag
, orderType
, Qty
, Price
, CheckQty
, reserveDeny
, confirmNo
, acceptType
, orgOrderNo
, stockName
, payType
, creditTransType
, confirmQty
, confirmPrice
, commType
, modifyFlag
, confirmedTime
, orderDate
, createdDate
)
VALUES
(
'{0}'
, '{1}'
, '{2}'
, '{3}'
, '{4}'
, '{5}'
, '{6}'
, '{7}'
, '{8}'
, '{9}'
, '{10}'
, '{11}'
, '{12}'
, '{13}'
, '{14}'
, '{15}'
, '{16}'
, '{17}'
, '{18}'
, '{19}'
, '{20}'
, NOW()
)</value>
  </data>
  <data name="체결요청내역으로내주문업데이트" xml:space="preserve">
    <value>UPDATE tbl_stock_order
SET STATUS = '완료'
, orderNo = '{3}'
, updateDate = NOW()
, price = '{4}'
WHERE inqDate = '{0}'
AND stockCode = '{1}'
AND Qty = '{2}'
and OrderType = '매수'
and Status = '요청중'
and orderNo is null</value>
  </data>
  <data name="체결요청내역으로매도완료업데이트" xml:space="preserve">
    <value>UPDATE tbl_stock_order
SET STATUS = '완료'
, orderNo = '{3}'
, updateDate = NOW()
, price = '{4}'
WHERE inqDate = '{0}'
AND stockCode = '{1}'
AND Qty = '{2}'
and OrderType = '매도'
and Status = '요청중'
and orderNo is null</value>
  </data>
</root>